// Import statement:
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class PrimeDirective {
  
  // Add your methods here:
  public boolean isPrime(int number) {
    
    if (number == 2) {
      return true;
    } else if (number < 2) {
      return false;
    } //Checking for edge cases
    
    for (int i = 2; i < number; i ++) {
      if (number % i == 0) {
        return false;
      }       
    }//Checking for any positive number > 2
    return true;    
  } //End of Method isPrime

  public ArrayList<Integer> onlyPrimes(int[] numbers) {
    ArrayList<Integer> primes = new ArrayList<Integer>();
    for (int number : numbers) {
      if (isPrime(number)) {
        primes.add(number);
      }
    }
    return primes;
  }//End of Method onlyPrimes

  public ArrayList<Integer> nPrimes(int[] numbers, int n) {
    ArrayList<Integer> nPrimes = new ArrayList<Integer>();
    int size = nPrimes.size();
    for (int i = 0; i < numbers.length; i++) {
      if (isPrime(numbers[i])) {
        while (size < n) {
          nPrimes.add(numbers[i]);
          size++;
          break;          
        }
      } 
    }
    return nPrimes;
  }//End of Method onlyPrimes
  
  public ArrayList<Integer> filterOddOrEven(int[] numbers, String oddEven) {
    oddEven = oddEven.toLowerCase();
    ArrayList<Integer> filteredArray = new ArrayList<Integer>();
    if (oddEven.contains("odd")) {
      for (int number : numbers) {
        if (number % 2 == 1) {
          filteredArray.add(number);
        } 
      } //End of filtering for odds
      
    } else if (oddEven.contains("even")) {
        for (int number : numbers) {
          if (number % 2 == 1) {
            filteredArray.add(number);
          } 
        }
      }//End of filtering for evens

      return filteredArray;
          
  }// End of method filterOddOrEven

  public ArrayList<Integer> fibonacciList(int n) {
    ArrayList<Integer> fibonnaciNumbers = new ArrayList<Integer>();
    if (n == 1) {
      fibonnaciNumbers.add(0);
    } else {
      fibonnaciNumbers.addAll(Arrays.asList(0, 1));
      for (int i = 2; i < n; i ++) {
        fibonnaciNumbers.add((fibonnaciNumbers.get(i - 2) + fibonnaciNumbers.get(i - 1)));  
      }
    }
    return fibonnaciNumbers;
  }
  
  public static void main(String[] args) {

    PrimeDirective pd = new PrimeDirective();
    int[] numbers = {6, 29, 28, 33, 11, 100, 101, 43, 89};
    
    System.out.println(pd.isPrime(7));
    System.out.println(pd.isPrime(28));
    System.out.println(pd.isPrime(2));
    System.out.println(pd.isPrime(0));

    System.out.println(pd.onlyPrimes(numbers));
    System.out.println(pd.nPrimes(numbers, 4));
    System.out.println(pd.filterOddOrEven(numbers, "odd"));
    System.out.println(pd.filterOddOrEven(numbers, "even"));
    System.out.println(pd.fibonacciList(9));

  }//End of Main  

}//End of Class PrimeDirective
